[tool.poetry]
name = "gen-ai-study"
version = "0.0.0"
description = "Gen AI Case Study"
authors = []
readme = "README.md"
packages = [{include = "app", from = "src"}]

[tool.poetry.scripts]
app = "app.__main__:run"

[tool.poetry.dependencies]
python = "^3.11"
chromadb = "^0.4.24"
llama-index = "^0.10.28"
llama-index-embeddings-huggingface = "^0.2.0"
llama-index-llms-ollama = "^0.1.2"
llama-index-readers-file = "^0.1.16"
llama-index-vector-stores-chroma = "^0.1.6"
spacy = "^3.7.4"

[tool.poetry.group.lint.dependencies]
black = "^24.3.0"
pylint = "^3.1.0"
pylint-pydantic = "^0.3.2"
mypy = "^1.9.0"
ruff = "^0.3.6"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
show_error_codes = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "llama_index.agent.*",
    "llama_index.embeddings.*",
    "llama_index.llms.*",
    "llama_index.readers.*",
    "llama_index.vector_stores.*"
]

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]
fix = true
ignore = [
  "E501", # pycodestyle line too long, handled by black
  "ERA001",
  "D100", # pydocstyle - missing docstring in public module
  "D101", # pydocstyle - missing docstring in public class
  "D102", # pydocstyle - missing docstring in public method
  "D103", # pydocstyle - missing docstring in public function
  "D104", # pydocstyle - missing docstring in public package
  "D105", # pydocstyle - missing docstring in magic method
  "D106", # pydocstyle - missing docstring in public nested class
  "D107", # pydocstyle - missing docstring in __init__
  "D202", # pydocstyle - no blank lines allowed after function docstring
  "D205", # pydocstyle - 1 blank line required between summary line and description
  "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037", # pyupgrade - removes quotes from type annotation
  "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010", # flake8-bugbear - do not call setattr with a constant attribute value
  "B008", #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012", # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401", # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "ANN102",
  "ANN101", # ruff - Missing type annotation for `self` in method
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001", # Boolean typed positional argument in function definition
  "FBT002", # Boolean default positional argument in function definition
  "FBT003", # Boolean Boolean default positional argument in function definition
  "ARG002", # Unused method argument
  "ARG001", #  Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "SLF001",
  "PT007",
  "PT004",
  "PT005",
  "S603",
  "E501", # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "ANN401",
  "ANN102",
  "ANN101",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "PERF203", # ignore for now; investigate
  "RET504", # Unnecessary assignment to {name} before return statement
  "F841", # pyflakes - local variable {name} is assigned to but never used
  "F401", # pyflakes - module imported but unused
]
line-length = 120
select = [
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "D", # pydocstyle
  "DJ", # flake8-django
  "DTZ", # flake8-datetimez
  "E", # pycodestyle errors
  "ERA", # eradicate
  "EXE", # flake8-executable
  "F", # pyflakes
  "G", # flake8-logging-format
  "I", # isort
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "N", # pep8-naming
  "PIE", # flake8-pie
  "PLC", # pylint - convention
  "PLE", # pylint - error
  "PLW", # pylint - warning
  "PTH", # flake8-use-pathlib
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RUF", # Ruff-specific rules
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "T10", # flake8-debugger
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "UP", # pyupgrade
  "W", # pycodestyle - warning
  "YTT", # flake8-2020
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["src"]
target-version = "py311"